/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.72
 * Generated at: 2017-06-22 13:04:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.echart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class bar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");

	String path = request.getContextPath();
	String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(path );
      out.write("/resources/js/echarts.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar num = Math.random();//Math.random()：得到一个0到1之间的随机数\r\n");
      out.write("\tvar nm = \"tyghjkl;hjkl';kj';kj';kjds;lakd;lsakd;lsa\";\r\n");
      out.write("\tvar myChart;\r\n");
      out.write("\t//在界面加载的时候初始化echarts\r\n");
      out.write("\tfunction initECharts(id)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tmyChart= echarts.init(document.getElementById(id));\r\n");
      out.write("\t};\r\n");
      out.write("\tfunction ld(ttl,leg,xa,ser,id)\r\n");
      out.write("\t{\r\n");
      out.write("\t\t//数据\r\n");
      out.write("        // 基于准备好的dom，初始化echarts实例\r\n");
      out.write("\r\n");
      out.write("        // 指定图表的配置项和数据\r\n");
      out.write("        var option = {\r\n");
      out.write("            title: {\r\n");
      out.write("            \t//设置标题\r\n");
      out.write("                text: ttl,\r\n");
      out.write("                //设置是否显示标题\r\n");
      out.write("                show:true,\r\n");
      out.write("                //设置超链接，默认为\"\"\r\n");
      out.write("                //link:\"http://www.baidu.com\",\r\n");
      out.write("                //在什么位置打开超链接 self：当前窗口；blank：新窗口\r\n");
      out.write("                //target:\"blank\",\r\n");
      out.write("                //设置标题的样式\r\n");
      out.write("                textStyle:{\r\n");
      out.write("                \t//设置标题的颜色 默认#333\r\n");
      out.write("                \tcolor:'#ff9900',\r\n");
      out.write("                \t//设置文字样式，可选项：normal，italic，oblique\r\n");
      out.write("                \tfontStyle:'italic',\r\n");
      out.write("                \t//设置文字的宽度可选normal，bold，bolder，lighter，100 | 200 | 300 | 400...\r\n");
      out.write("                \tfontWeight:'lighter',\r\n");
      out.write("                \t//设置字体主题\r\n");
      out.write("                \tfontFamily:'sans-serif',\r\n");
      out.write("                \t//设置字体大小\r\n");
      out.write("                \tfontSize:30\r\n");
      out.write("                },\r\n");
      out.write("\t\t\t\t//设置标题的水平对齐方式,支持left，center，right不太懂，感觉是图相对于文字的位置\r\n");
      out.write("\t\t\t\t//textAlign:'left',\r\n");
      out.write("\t\t\t\t//设置标题的垂直对齐，支持top，middle，bottom，没测试通过\r\n");
      out.write("\t\t\t\ttextBaseLine:'bottom',\r\n");
      out.write("\t\t\t\t//设置副标题，支持\\n换行，不是自适应的，需要自己调整位置\r\n");
      out.write("\t\t\t\tsubtext:'测试副标题\\n换行\\n换行\\n换行测试副标题',\r\n");
      out.write("\t\t\t\t//设置副标题的超链接\r\n");
      out.write("\t\t\t\tsublink:\"http://www.baidu.com\",\r\n");
      out.write("\t\t\t\t//设置指定窗口打开超链接,与target相同\r\n");
      out.write("\t\t\t\tsubtarget:'blank',\r\n");
      out.write("\t\t\t\t//设置副标题样式，与textStyle相同\r\n");
      out.write("\t\t\t\tsubtextStyle:{\r\n");
      out.write("\t\t\t\t\t//默认#aaa\r\n");
      out.write("\t\t\t\t\tcolor:'#000'\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\t//设置内边距，默认5[,5,5,5]    有如下两种设置方式\r\n");
      out.write("\t\t\t\t//padding:5,\r\n");
      out.write("\t\t\t\tpadding:[5,10,15,20,],\r\n");
      out.write("\t\t\t\t//设置主标题与副标题之间的间距,默认10\r\n");
      out.write("\t\t\t\titemGap:20,\r\n");
      out.write("\t\t\t\t//所有图形的zlevel值,默认0\r\n");
      out.write("\t\t\t\t//用于 Canvas 分层，不同zlevel值的图形会放置在不同的 Canvas 中，Canvas 分层是一种常见的优化手段。\r\n");
      out.write("\t\t\t\t//我们可以把一些图形变化频繁（例如有动画）的组件设置成一个单独的zlevel。需要注意的是过多的 Canvas \r\n");
      out.write("\t\t\t\t//会引起内存开销的增大，在手机端上需要谨慎使用以防崩溃。\r\n");
      out.write("\t\t\t\t//大的 Canvas 会放在 zlevel 小的 Canvas 的上面。\r\n");
      out.write("// \t\t\t\tzlevel:0,\r\n");
      out.write("\t\t\t\t//组件的所有z值，默认2 控制图形的先后顺序，z值小的会被z值大的覆盖，\r\n");
      out.write("\t\t\t\t//z相比与zlevel的优先级更低，而且不会创建新的canvas\r\n");
      out.write("// \t\t\t\tz:2,\r\n");
      out.write("// \t\t\t\t//grid组件距离容器左侧的距离,绝对距离20,相对距离20%，对齐left,center, right\r\n");
      out.write("// \t\t\t\tleft:'auto',\r\n");
      out.write("// \t\t\t\t//grid组件距离容器左侧的距离,绝对距离20,相对距离20%，对齐top,middle, bottom\r\n");
      out.write("// \t\t\t\ttop:'auto',\r\n");
      out.write("// \t\t\t\t//grid组件距离容器左侧的距离,默认auto,绝对距离20,相对距离20%，对齐left,center, right\r\n");
      out.write("// \t\t\t\tright:'auto',\r\n");
      out.write("// \t\t\t\t//grid组件距离容器左侧的距离,默认auto,绝对距离20,相对距离20%，对齐left,center, right\r\n");
      out.write("// \t\t\t\tbottom:'auto',\r\n");
      out.write("// \t\t\t\t//标题背景颜色，默认透明,rgba,a:0~1透明度减小，0位全透明，1为全不透明\r\n");
      out.write("// \t\t\t\tbackgroundColor:'rgba(255,125,0,0)',\r\n");
      out.write("// \t\t\t\t//标题边框颜色，默认透明,与backgroundColor支持相同\r\n");
      out.write("// \t\t\t\tborderColor:'rgba(255,125,0,0)',\r\n");
      out.write("// \t\t\t\t//设置标题的边框线宽度，默认0\r\n");
      out.write("// \t\t\t\tborderWidth:1,\r\n");
      out.write("\t\t\t\t//图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。\r\n");
      out.write("\t\t\t\tshadowBlur:3,\r\n");
      out.write("\t\t\t\t//阴影颜色。支持的格式同color。\r\n");
      out.write("\t\t\t\tshadowColor:'rgba(255,99,0,0)',\r\n");
      out.write("\t\t\t\t//X平偏移量，默认0\r\n");
      out.write("\t\t\t\tshadowOffsetX:2,\r\n");
      out.write("\t\t\t\t//y平偏移量，默认0\r\n");
      out.write("\t\t\t\tshadowOffsetY:0\r\n");
      out.write("            },\r\n");
      out.write("            legend: {\r\n");
      out.write("            \t//在使用的时候，请把下面的注释去掉，使用默认的只有名称的显示\r\n");
      out.write("                //data:leg,\r\n");
      out.write("                //是否显示,默认显示,如果为false则不显示上边的多个标题\r\n");
      out.write("                show:true,\r\n");
      out.write("                //不懂，默认0\r\n");
      out.write("                zlevel:0,\r\n");
      out.write("                //不懂，默认2\r\n");
      out.write("                z:2,\r\n");
      out.write("                //距离容器左边框的距离\r\n");
      out.write("//                 left:'auto',\r\n");
      out.write("//                 //距离容器上边框的距离\r\n");
      out.write("//                 top:'auto',\r\n");
      out.write("//                 //距离容器右边框的距离\r\n");
      out.write("//                 right:'auto',\r\n");
      out.write("//                 //距离容器下边框的距离\r\n");
      out.write("//                 bottom:'auto',\r\n");
      out.write("//                 //图例组件的宽度。默认自适应。\r\n");
      out.write("//                 width:'auto',\r\n");
      out.write("//                 //图例组件的高度。默认自适应。\r\n");
      out.write("//                 height:'auto',\r\n");
      out.write("                //设置布局朝向，默认垂直,可选horizontal，vertical\r\n");
      out.write("                orient:'vertical',\r\n");
      out.write("                //图例列表的布局朝向可选 小图标相对于文字的方向auto ，left，right\r\n");
      out.write("                align:'left',\r\n");
      out.write("                //图标的内边距 上右下左\r\n");
      out.write("                padding:[10,50,10,10,],\r\n");
      out.write("                //设置每个选项之间的间距 默认10\r\n");
      out.write("                itemGap:20,\r\n");
      out.write("                //每个小图标的宽度 默认25\r\n");
      out.write("                itemWidth:40,\r\n");
      out.write("                //每个小图标的高度 默认14\r\n");
      out.write("                itemHeight:10,\r\n");
      out.write("                //用来格式化图标的文本,支持{}和回调方法\r\n");
      out.write("                formatter:function () {\r\n");
      out.write("                    //参数：需要转换的【文字】，【总宽度】，【文字每个宽度样式】，【超出部分的显示样式】\r\n");
      out.write("        \t\t\treturn echarts.format.truncateText(nm, 40, '14px Microsoft Yahei', '~~');\r\n");
      out.write("    \t\t\t},\r\n");
      out.write("                //formatter:'dghfkjdfhkljfashjdsjafkldjskl',\r\n");
      out.write("                //图例选择的模式，控制是否可以通过点击图例改变系列的显示状态。默认开启图例选择，可以设成 false 关闭。\r\n");
      out.write("\t\t\t\t//除此之外也可以设成 'single' 或者 'multiple' 使用单选或者多选模式。\r\n");
      out.write("                selectedMode:true,\r\n");
      out.write("                //图标关闭时的图标颜色，默认#ccc\r\n");
      out.write("                inactiveColor:'#ff9900',\r\n");
      out.write("                //图标的选中状态表{data[0]:bool,data[1]:bool},默认true\r\n");
      out.write("                selected:{'legend0':true,'legend1':true},\r\n");
      out.write("                //图例的公用文本样式。上面都有\r\n");
      out.write("                textStyle:{\r\n");
      out.write("                    //颜色,默认#333,当被选中时文字的颜色\r\n");
      out.write("                    color:'#00ff00',\r\n");
      out.write("                    //文字的样式,同上面的fontStyle\r\n");
      out.write("                    fontStyle:'noormal'\r\n");
      out.write("                },\r\n");
      out.write("                //显示提示框，比如当文字很长的情况下，可以使用这个配置来悬浮显示全部文字，默认开启\r\n");
      out.write("                //详细信息参考后面的tooltip\r\n");
      out.write("                tooltip:{\r\n");
      out.write("                    show:true\r\n");
      out.write("                },\r\n");
      out.write("                //图例的数据数组。数组项通常为一个字符串，每一项代表一个系列的 name（如果是饼图，也可以是饼图单个数据的 name）。图例组件会自动根据对应系列的图形标记（symbol）来绘制自己的颜色和标记，特殊字符串 ''（空字符串）或者 '\\n'（换行字符串）用于图例的换行。\r\n");
      out.write("\t\t\t\t//如果要设置单独一项的样式，也可以把该项写成配置项对象。此时必须使用 name 属性对应表示系列的 name。\r\n");
      out.write("\t\t\t\tdata:[{\r\n");
      out.write("\t\t\t\t\t name: 'legend0',\r\n");
      out.write("\t\t\t\t\t    // 强制设置图形为圆。\r\n");
      out.write("\t\t\t\t\t    icon: 'circle',\r\n");
      out.write("\t\t\t\t\t    // 设置文本为红色\r\n");
      out.write("\t\t\t\t\t    textStyle: {\r\n");
      out.write("\t\t\t\t\t        color: 'red'\r\n");
      out.write("\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t name: 'legend1',\r\n");
      out.write("\t\t\t\t\t\t    // 强制设置图形为圆。\r\n");
      out.write("\t\t\t\t\t\t    icon: 'circle',\r\n");
      out.write("\t\t\t\t\t\t    // 设置文本为红色\r\n");
      out.write("\t\t\t\t\t\t    textStyle: {\r\n");
      out.write("\t\t\t\t\t\t        color: 'blue'\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t]\r\n");
      out.write("            },\r\n");
      out.write("            tooltip: {},\r\n");
      out.write("            xAxis: {\r\n");
      out.write("                data: xa\r\n");
      out.write("            },\r\n");
      out.write("            yAxis: {},\r\n");
      out.write("            series: ser\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        // 使用刚指定的配置项和数据显示图表。\r\n");
      out.write("        myChart.setOption(option);\r\n");
      out.write("\t};\r\n");
      out.write("\t//这个是在按钮点击时触发的方法\r\n");
      out.write("\tfunction clk(id)\r\n");
      out.write("\t{\r\n");
      out.write("\t\t//数据\r\n");
      out.write("\t\tvar x=2,y=5;\r\n");
      out.write("\t\tvar title = \"EChart\";\r\n");
      out.write("\t\tvar legend = getLegend(x);\r\n");
      out.write("\t\tvar xAxis=getXAxis(y);\r\n");
      out.write("\t\tvar series = getSeries(x, y, \"bar\");\r\n");
      out.write("\t\tld(title, legend, xAxis, series, id);\r\n");
      out.write("\t};\r\n");
      out.write("\t//说明，这里的legend的每一位必须与series中的name有对应关系，将会自动生成，就是在上面显示分类的东西\r\n");
      out.write("\tfunction getLegend(x)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar legend=[];\r\n");
      out.write("\t\tfor(var i=0;i<x;i++)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tlegend[i]='legend'+i;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn legend;\r\n");
      out.write("\t};\r\n");
      out.write("\t//这里随意指定，仅仅是x坐标的文字\r\n");
      out.write("\tfunction getXAxis(x)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar xAxis=[];\r\n");
      out.write("\t\tfor(var i =0;i<x;i++)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\txAxis[i]=\"xAxis\"+i;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn xAxis;\r\n");
      out.write("\t};\r\n");
      out.write("\t//注意：这里必须要自定义一个类，不可以用字符串类型，否则无法显示出数据\r\n");
      out.write("\tfunction getSeries(x,y,type)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar series=[];\r\n");
      out.write("\t\tfor(var i = 0;i<x;i++)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar name=\"legend\"+i;\r\n");
      out.write("\t\t\tvar data=getYData(y);\r\n");
      out.write("\t\t\tseries[i]=Series(name, type, data);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn series;\r\n");
      out.write("\t};\r\n");
      out.write("\t//获取每一种：如name1的全部数据，在这里采用随机数的方式，获得的数据必须全部都是数字类型\r\n");
      out.write("\tfunction getYData(y)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar data=[];\r\n");
      out.write("\t\tfor(var i=0;i<y;i++)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tnum = Math.random();\r\n");
      out.write("\t\t\tdata[i]=Math.ceil(num * 80);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn data;\r\n");
      out.write("\t};\r\n");
      out.write("\t//一个自定义的类\r\n");
      out.write("\tfunction Series(name,type,data)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar series = new Object;\r\n");
      out.write("\t\tseries.name=name;//相当于series下的name\r\n");
      out.write("\t\tseries.type=type;//相当于series下的type\r\n");
      out.write("\t\tseries.data=data;//相当于series下的data，是数字数组\r\n");
      out.write("\t\treturn series;\r\n");
      out.write("\t};\r\n");
      out.write("\t//重新设置大小\r\n");
      out.write("\tfunction resize(id)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif(myChart)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar option = myChart.getOption();\r\n");
      out.write("\t\t\tmyChart.resize(option,100,100);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t};\r\n");
      out.write("\tfunction setColor(id)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif(myChart)\r\n");
      out.write("\t\t{\r\n");
      out.write("// \t\t\tmyChart.setOption(\r\n");
      out.write("// \t\t\t\t{\r\n");
      out.write("// \t\t\t\t\tvisualMap:\r\n");
      out.write("// \t\t\t\t\t{\r\n");
      out.write("// \t\t\t\t\t\tcolor:#ff9900;\r\n");
      out.write("// \t\t\t\t\t}\r\n");
      out.write("// \t\t\t\t}\r\n");
      out.write("// \t\t\t);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("    </script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body onload=\"initECharts('main')\">\r\n");
      out.write("<input type=\"button\" onclick=\"clk('main')\" value=\"点击生成柱状图\">\r\n");
      out.write("<br/>\r\n");
      out.write("<label>更改样式</label>\r\n");
      out.write("<br/>\r\n");
      out.write("<input type=\"button\" onclick=\"resize('main')\" value=\"改变柱状图大小\">\r\n");
      out.write("<input type=\"button\" onclick=\"setColor('main')\" value=\"改变柱状图颜色\">\r\n");
      out.write("<div id=\"main\" style=\"width: 600px;height:400px;\"></div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
